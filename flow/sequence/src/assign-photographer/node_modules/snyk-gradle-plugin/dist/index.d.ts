export interface BaseInspectOptions {
    dev?: boolean;
    args?: string[];
}
export interface SingleRootInspectOptions extends BaseInspectOptions {
    'gradle-sub-project'?: string;
}
export interface MultiRootsInspectOptions extends BaseInspectOptions {
    multiDepRoots: true;
}
export interface SingleDepRootResult {
    plugin: PluginMetadata;
    package: DepTree;
}
export interface MultiDepRootsResult {
    plugin: PluginMetadata;
    depRoots: DepRoot[];
}
export interface PluginMetadata {
    name: string;
    runtime: string;
    targetFile?: string;
    meta?: {
        allSubProjectNames?: string[];
    };
}
export interface DepDict {
    [name: string]: DepTree;
}
export interface DepRoot {
    depTree: DepTree;
    targetFile?: string;
    meta?: any;
}
export interface DepTree {
    name: string;
    version: string;
    dependencies?: DepDict;
    packageFormatVersion?: string;
}
export declare function inspect(root: any, targetFile: any, options?: SingleRootInspectOptions): Promise<SingleDepRootResult>;
export declare function inspect(root: any, targetFile: any, options: MultiRootsInspectOptions): Promise<MultiDepRootsResult>;
interface JsonDepsScriptResult {
    defaultProject: string;
    projects: ProjectsDict;
    allSubProjectNames: string[];
}
interface ProjectsDict {
    [project: string]: GradleProjectInfo;
}
interface GradleProjectInfo {
    depDict: DepDict;
    targetFile: string;
}
declare function extractJsonFromScriptOutput(stdoutText: string): JsonDepsScriptResult;
declare function buildArgs(root: any, targetFile: any, gradleArgs?: string[]): string[];
export declare const exportsForTests: {
    buildArgs: typeof buildArgs;
    extractJsonFromScriptOutput: typeof extractJsonFromScriptOutput;
};
export {};
