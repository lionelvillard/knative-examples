export interface Pkg {
    name: string;
    version?: string;
}
export interface PkgInfo {
    name: string;
    version?: string;
}
export interface GraphNode {
    nodeId: string;
    pkgId: string;
    deps: Array<{
        nodeId: string;
    }>;
}
export interface PkgManager {
    name: string;
    version?: string;
    repositories?: Array<{
        alias: string;
    }>;
}
export interface DepGraphData {
    schemaVersion: string;
    pkgManager: PkgManager;
    pkgs: Array<{
        id: string;
        info: PkgInfo;
    }>;
    graph: {
        rootNodeId: string;
        nodes: GraphNode[];
    };
}
export interface DepGraph {
    readonly pkgManager: PkgManager;
    readonly rootPkg: PkgInfo;
    getPkgs(): PkgInfo[];
    toJSON(): DepGraphData;
    pkgPathsToRoot(pkg: Pkg): PkgInfo[][];
    countPathsToRoot(pkg: Pkg): number;
}
export interface DepGraphInternal extends DepGraph {
    readonly rootNodeId: string;
    getNodePkg(nodeId: string): PkgInfo;
    getPkgNodeIds(pkg: Pkg): string[];
    getNodeDepsNodeIds(nodeId: string): string[];
    getNodeParentsNodeIds(nodeId: string): string[];
    hasCycles(): boolean;
}
